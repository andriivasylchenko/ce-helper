#!/bin/bash
# ---------------------------------------------------------------------------
# deployment_helper - Minimal DevOps automation helper

# Copyright 2022,  <andrii@ibm.com>
# All rights reserved.

# Use "ce-helper -h" for help
# .ce.ENVIRONMENT.env file with settings should avaliable in the current folder
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION=0.1

SCRIPT_START_TIME=`date +%s`

# Parse command-line
case $2 in
    -p | --prod)
      DEPLOYMENT_LOCATION=prod ;;
    -s | --stage)
      DEPLOYMENT_LOCATION=stage ;;
    -t | --test)
      DEPLOYMENT_LOCATION=test ;;
    *)
      DEPLOYMENT_LOCATION=prod ;;
esac

PACKAGE_VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")
	if [ $? -eq 0 ]; then
	    echo "PACKAGE VERSION: $PACKAGE_VERSION"
		echo ""
	else
	    no_package_version_exit
	fi

source ./.ce.$DEPLOYMENT_LOCATION.env


clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

no_params_exit() {
  echo -e "${PROGNAME}: ${1:-"No params file. Please fill ce_params_$DEPLOYMENT_LOCATION"}" >&2
  clean_up
  exit 22
}

no_package_version_exit() {
  echo -e "${PROGNAME}: ${1:-"No package version. Make sure version is specified in package.json"}" >&2
  clean_up
  exit 22
}

no_env_exit() {
  echo -e "${PROGNAME}: ${1:-"No deployment environment specified."}" >&2
  clean_up
  exit 22
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [OPTION] [ENVIRONMENT] [ACTION]"
}

help_message() {
  cat <<- _EOF_

  $PROGNAME ver. $VERSION
  Minimal DevOps automation helper for IBM Code Engine

  $(usage)

  Application accepts up to 3 arguments, one of each type

  OPTION:
  -h, --help  Display this help message and exit.
  -l, --login  Login to IBM Cloud and IBM Container Registry
  -b, --build  Build docker image, tag it and push to IBM Container Registry
  -d, --deploy  Deploy to Kubernetes instance
  -a, --all  Build and Deploy procedures
  -al, --all-with-login  Login, Build and Deploy procedures

  ENVIRONMENT:
  -p, --prod Use production environment
  -s, --stage Use staging environment
  -t, --test Use test environment

  ACTION:
  -c, --create Use to create new application on IBM Code Engine
  -u, --update Use to update existing application on IBM Code Engine

_EOF_
  return
}


login_logic() {
	echo ""
	echo "-----------------------"
	echo "-- LOGIN --------------"
	echo "-----------------------"
	STEPS_COUNT=4
	CURRENT_STEP=1

	LOGIN_ARGUMENTS=""

	if [ -n "$CLOUD_LOGIN_TYPE" ]; then
		if [[ "$CLOUD_LOGIN_TYPE" == "sso" ]]
		then
			LOGIN_ARGUMENTS="$LOGIN_ARGUMENTS --sso"
		fi
		if [[ "$CLOUD_LOGIN_TYPE" == "file" ]]
		then
			LOGIN_ARGUMENTS="$LOGIN_ARGUMENTS --apikey @$CLOUD_LOGIN_IAM_KEY_FILE"
		fi
		if [[ "$CLOUD_LOGIN_TYPE" == "key" ]]
		then
			LOGIN_ARGUMENTS="$LOGIN_ARGUMENTS --apikey $CLOUD_LOGIN_IAM"
		fi
		if [ -n "$CLOUD_ACCOUNT" ]; then
			LOGIN_ARGUMENTS="$LOGIN_ARGUMENTS -c $CLOUD_ACCOUNT"
		fi
	fi

	# step
	echo ""
	echo "- Step $CURRENT_STEP/$STEPS_COUNT - Log in to IBM Cloud"
	echo ""

	eval "ibmcloud login $LOGIN_ARGUMENTS -g $CLOUD_RESOURCE_GROUP -r $CLOUD_REGION"
	if [ $? -eq 0 ]; then
	    echo ""
		echo "- Step $CURRENT_STEP - OK"
		echo ""
		CURRENT_STEP=$(($CURRENT_STEP + 1))
	else
	    echo ""
		echo "- Step $CURRENT_STEP - FAIL"
		echo ""
		exit 13
	fi


	if [ $BUILD_TYPE != "remote" ]; then
		# step
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - Set IBM Container Registry region"
		echo ""
		ibmcloud cr region-set $CLOUD_REGION
		if [ $? -eq 0 ]; then
			echo ""
			echo "- Step $CURRENT_STEP - OK"
			echo ""
			CURRENT_STEP=$(($CURRENT_STEP + 1))
		else
			echo ""
			echo "- Step $CURRENT_STEP - FAIL"
			echo ""
			exit 13
		fi

		# step
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - Login to IBM Container Registry"
		echo ""
		ibmcloud cr login
		if [ $? -eq 0 ]; then
			echo ""
			echo "- Step $CURRENT_STEP - OK"
			echo ""
			CURRENT_STEP=$(($CURRENT_STEP + 1))
		else
			echo ""
			echo "- Step $CURRENT_STEP - FAIL"
			echo ""
			exit 13
		fi
	else
		echo "Skipping Container Registry login due to a remote build"
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - SKIP"
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - SKIP"
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo ""
	fi

	# step
	echo ""
	echo "- Step $CURRENT_STEP/$STEPS_COUNT - Selecting IBM Code Engine project"
	echo ""
	PROJECT_SELECTION_ARGUMENTS="--name $CODE_ENGINE_PROJECT_NAME"
	if [[ "$CLOUD_KUBERNETES_KUBECFG" == "true" ]]
		then
		PROJECT_SELECTION_ARGUMENTS="$PROJECT_SELECTION_ARGUMENTS --kubecfg"
	fi
	eval "ibmcloud ce project select $PROJECT_SELECTION_ARGUMENTS"
	if [ $? -eq 0 ]; then
	    echo ""
		echo "- Step $CURRENT_STEP - OK"
		echo ""
		CURRENT_STEP=$(($CURRENT_STEP + 1))
	else
	    echo ""
		echo "- Step $CURRENT_STEP - FAIL"
		echo ""
		exit 13
	fi
}


build_logic() {
	echo ""
	echo "-----------------------"
	echo "-- BUILD --------------"
	echo "-----------------------"
	STEPS_COUNT=4
	CURRENT_STEP=1

	if [ $BUILD_TYPE != "remote" ]; then
		# step
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - Getting current package version"
		echo ""
		PACKAGE_VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")

		if [ $? -eq 0 ]; then
			echo "PACKAGE VERSION: $PACKAGE_VERSION"
			echo ""
			echo "- Step $CURRENT_STEP - OK"
			echo ""
			CURRENT_STEP=$(($CURRENT_STEP + 1))
		else
			echo ""
			echo "- Step $CURRENT_STEP - FAIL"
			echo ""
			exit 13
		fi

		# step
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - Building docker image"
		echo ""
		DOCKERFILE_NAME=Dockerfile
		# Checking if Dockerfile has a different location or name
		if [ -n "$CODE_ENGINE_BUILD_DOCKERFILE" ]; then
			DOCKERFILE_NAME=[[ $CODE_ENGINE_BUILD_DOCKERFILE = /* ]] && .$CODE_ENGINE_BUILD_DOCKERFILE || $CODE_ENGINE_BUILD_DOCKERFILE
		fi
		echo $DOCKERFILE_NAME
		echo $CODE_ENGINE_BUILD_DOCKERFILE
		docker build -t $IMAGE_NAME -f $DOCKERFILE_NAME --build-arg BUILD_SCRIPT=build-$DEPLOYMENT_LOCATION .
		if [ $? -eq 0 ]; then
			echo ""
			echo "- Step $CURRENT_STEP - OK"
			echo ""
			CURRENT_STEP=$(($CURRENT_STEP + 1))
		else
			echo ""
			echo "- Step $CURRENT_STEP - FAIL"
			echo ""
			exit 13
		fi

		# step
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - Tagging docker image"
		echo ""
		docker tag $IMAGE_NAME $PUBLIC_CONTAINER_REGISTRY/$CONTAINER_REGISTRY_NAMESPACE/$IMAGE_NAME-$DEPLOYMENT_LOCATION:$PACKAGE_VERSION
		if [ $? -eq 0 ]; then
			echo ""
			echo "- Step $CURRENT_STEP - OK"
			echo ""
			CURRENT_STEP=$(($CURRENT_STEP + 1))
		else
			echo ""
			echo "- Step $CURRENT_STEP - FAIL"
			echo ""
			exit 13
		fi

		# step
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - Pushing docker image to IBM Container Registry"
		echo ""
		docker push $PUBLIC_CONTAINER_REGISTRY/$CONTAINER_REGISTRY_NAMESPACE/$IMAGE_NAME-$DEPLOYMENT_LOCATION:$PACKAGE_VERSION
		if [ $? -eq 0 ]; then
			echo ""
			echo "- Step $CURRENT_STEP - OK"
			echo ""
			CURRENT_STEP=$(($CURRENT_STEP + 1))
		else
			echo ""
			echo "- Step $CURRENT_STEP - FAIL"
			echo ""
			exit 13
		fi
	else
		echo ""
  		echo "Skipping local build phase"
		echo ""
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - SKIP"
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - SKIP"
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - SKIP"
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo "- Step $CURRENT_STEP/$STEPS_COUNT - SKIP"
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo ""
	fi
}

deploy_logic() {
	echo ""
	echo "-----------------------"
	echo "-- DEPLOY -------------"
	echo "-----------------------"
	STEPS_COUNT=1
	CURRENT_STEP=1

	echo ""
	echo "- Step $CURRENT_STEP/$STEPS_COUNT - Deployment to IBM Code Engine $APPLICATION_NAME-$DEPLOYMENT_LOCATION"
	echo "  Environment: $DEPLOYMENT_LOCATION"

	DEPLOYMENT_ARGUMENT="$OPERATION_TYPE --name $APPLICATION_NAME"
	if [[ "$APPLICATION_INCLUDE_ENVIRONMENT_NAME" == "true" ]]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT-$DEPLOYMENT_LOCATION"
	fi

	if [[ "$BUILD_TYPE" == "local" ]]
	then
		# local build deployment
		IMAGE_ARGUMENT="$PUBLIC_CONTAINER_REGISTRY/$CONTAINER_REGISTRY_NAMESPACE/$IMAGE_NAME"
		if [[ "$IMAGE_INCLUDE_ENVIRONMENT_NAME" == "true" ]]
		then
			IMAGE_ARGUMENT="$IMAGE_ARGUMENT-$DEPLOYMENT_LOCATION"
		fi
		IMAGE_ARGUMENT="$IMAGE_ARGUMENT:$PACKAGE_VERSION"

		echo "  Docker image: $IMAGE_ARGUMENT"
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --image $IMAGE_ARGUMENT"
	else
		# cloud build then deployment

		# Maybe will find a workaround for setting image name
		if [ -n "$IMAGE_NAME" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --image $PRIVATE_CONTAINER_REGISTRY/$CONTAINER_REGISTRY_NAMESPACE/$IMAGE_NAME"
			if [[ "$IMAGE_INCLUDE_ENVIRONMENT_NAME" == "true" ]]
			then
				DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT-$DEPLOYMENT_LOCATION"
			fi
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT:$PACKAGE_VERSION"
		fi

		if [ -n "$CODE_ENGINE_BUILD_STRATEGY" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-strategy  $CODE_ENGINE_BUILD_STRATEGY"
		fi

		if [ -n "$CODE_ENGINE_BUILD_DOCKERFILE" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-dockerfile  $CODE_ENGINE_BUILD_DOCKERFILE"
		fi

		if [ -n "$CODE_ENGINE_BUILD_SIZE" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-size $CODE_ENGINE_BUILD_SIZE"
		fi

		if [ -n "$CODE_ENGINE_CODE_REPO" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-source $CODE_ENGINE_CODE_REPO"
		fi

		if [ -n "$CODE_ENGINE_CODE_REPO_BRANCH" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-commit $CODE_ENGINE_CODE_REPO_BRANCH"
		fi

		if [ -n "$CODE_ENGINE_BUILD_TIMEOUT" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-timeout $CODE_ENGINE_BUILD_TIMEOUT"
		fi

		if [ -n "$CODE_ENGINE_CODE_REPO_SECRET" ]; then
			DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --build-git-repo-secret $CODE_ENGINE_CODE_REPO_SECRET"
		fi
	fi

	if [ -n "$CODE_ENGINE_CPU" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --cpu $CODE_ENGINE_CPU"
	fi

	if [ -n "$CODE_ENGINE_MEMORY" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --memory $CODE_ENGINE_MEMORY"
	fi

		if [ -n "$CODE_ENGINE_STORAGE" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --ephemeral-storage $CODE_ENGINE_STORAGE"
	fi

	if [ -n "$CODE_ENGINE_MIN_SCALE" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --min-scale $CODE_ENGINE_MIN_SCALE"
	fi

	if [ -n "$CODE_ENGINE_MAX_SCALE" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --max-scale $CODE_ENGINE_MAX_SCALE"
	fi

	if [ -n "$CODE_ENGINE_CONCURRENCY" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --concurrency $CODE_ENGINE_CONCURRENCY"
	fi

	if [ -n "$CODE_ENGINE_CONCURRENCY_TARGET" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --concurrency-target $CODE_ENGINE_CONCURRENCY_TARGET"
	fi

	if [ -n "$CODE_ENGINE_PORT" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --port $CODE_ENGINE_PORT"
	fi

	if [ -n "$CODE_ENGINE_CONTAINER_REGISTRY_SECRET" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --registry-secret $CODE_ENGINE_CONTAINER_REGISTRY_SECRET"
	fi

	if [ -n "$CODE_ENGINE_VISIBILITY" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --visibility $CODE_ENGINE_VISIBILITY"
	fi

	if [ -n "$CODE_ENGINE_ENV_SECRET" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --env-from-secret $CODE_ENGINE_ENV_SECRET"
	fi

	if [ -n "$CODE_ENGINE_ENV_CONFIG_MAP" ]; then
		DEPLOYMENT_ARGUMENT="$DEPLOYMENT_ARGUMENT --env-from-configmap $CODE_ENGINE_ENV_CONFIG_MAP"
	fi

	echo ""
	echo "ibmcloud ce application $DEPLOYMENT_ARGUMENT"
	echo ""

	eval "ibmcloud ce application $DEPLOYMENT_ARGUMENT"

	if [ $? -eq 0 ]; then
	    echo ""
		echo "- Step $CURRENT_STEP - OK"
		echo ""
		CURRENT_STEP=$(($CURRENT_STEP + 1))
		echo "  IMPORTANT! This doesn't mean a succesful start of $APPLICATION_NAME. Check logs or visit app for verification"
		echo ""
	else
	    echo ""
		echo "- Step $CURRENT_STEP - FAIL"
		echo ""
		exit 13
	fi
}

all_logic() {
	echo ""
	echo "Launching Build & Deploy"

	build_logic;
	if [ $? -eq 0 ]; then
	    echo ""
		echo "BUILD SUCCESS"
		echo ""

		deploy_logic;
		if [ $? -eq 0 ]; then
			echo ""
			echo "DEPLOY SUCCESS"
			echo ""

			echo "Build & Deploy has finished"
			echo ""
		else
			echo ""
			echo "DEPLOY FAILURE"
			echo ""
			exit 13
		fi
	else
	    echo ""
		echo "BUILD FAILURE"
		echo ""
		exit 13
	fi
}

all_with_login_logic() {
	echo ""
	echo "Launching Login, Build & Deploy"

	login_logic;
	if [ $? -eq 0 ]; then
	    echo ""
		echo "LOGIN SUCCESS"
		echo ""

		build_logic;
		if [ $? -eq 0 ]; then
			echo ""
			echo "BUILD SUCCESS"
			echo ""

			deploy_logic;
			if [ $? -eq 0 ]; then
				echo ""
				echo "DEPLOY SUCCESS"
				echo ""

				echo "Login, Build & Deploy has finished"
				echo ""
			else
				echo ""
				echo "DEPLOY FAILURE"
				echo ""
				exit 13
			fi
		else
			echo ""
			echo "BUILD FAILURE"
			echo ""
			exit 13
		fi
	else
		echo ""
		echo "LOGIN FAILURE"
		echo ""
		exit 13
	fi
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

if [ -z "$APPLICATION_NAME" ]
then
	  no_params_exit
fi

# Parse command-line

case $3 in
    -c | --create)
      OPERATION_TYPE=create ;;
    -u | --update)
      OPERATION_TYPE=update ;;
	-* | --*)
	  OPERATION_TYPE=update ;;
    *)
      OPERATION_TYPE=update ;;
esac

# Parse command-line
case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    -l | --login)
      login_logic; ;;
    -b | --build)
      build_logic; ;;
	-d | --deploy)
      deploy_logic; ;;
    -a | --all)
      all_logic; ;;
    -al | --all-with-login)
      all_with_login_logic; ;;
    -* | --*)
	  help_message
      error_exit "Unknown option $1" ;;
    *)
      help_message; graceful_exit ;;
esac

SCRIPT_END_TIME=`date +%s`
SCRIPT_RUNTIME=$((SCRIPT_END_TIME-SCRIPT_START_TIME))
SCRIPT_RUNTIME_MINUTES=$(( (SCRIPT_RUNTIME % 3600) / 60 ));
SCRIPT_RUNTIME_SECONDS=$(( (SCRIPT_RUNTIME % 3600) % 60 ));
echo ""
echo "Execution time: $SCRIPT_RUNTIME_MINUTES minutes $SCRIPT_RUNTIME_SECONDS seconds"
echo ""

graceful_exit